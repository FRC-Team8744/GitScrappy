// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// import frc.robot.commands.*;
// import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxRelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Spinner extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
private static final boolean ENABLE_VELOCITY_TEST = false;
private static final boolean ENABLE_POSITION_TEST = false;
private static final boolean ENABLE_EXTERNAL_ENCODER = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax spinMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private SparkMaxPIDController m_pidController;
    private RelativeEncoder m_encoder;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM;
  
    /**
    *
    */
    public Spinner() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
spinMotor = new CANSparkMax(5, MotorType.kBrushless);
spinMotor.restoreFactoryDefaults();  
spinMotor.setInverted(false);
spinMotor.setIdleMode(IdleMode.kCoast);
// spinMotor.burnFlash();
  
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        spinMotor.setSmartCurrentLimit(10);  // Current limit in Amps (integer)
        // Encoder object created to display position values
        if (ENABLE_EXTERNAL_ENCODER) {
            m_encoder = spinMotor.getEncoder(SparkMaxRelativeEncoder.Type.kQuadrature, 4096);
        } else {
            m_encoder = spinMotor.getEncoder();
            // m_encoder = spinMotor.getEncoder(SparkMaxRelativeEncoder.Type.kHallSensor, 42);
        }

        /**
         * In order to use PID functionality for a controller, a SparkMaxPIDController object
         * is constructed by calling the getPIDController() method on an existing
         * CANSparkMax object
         */
        m_pidController = spinMotor.getPIDController();

        /**
         * The PID Controller can be configured to use the analog sensor as its feedback
         * device with the method SetFeedbackDevice() and passing the PID Controller
         * the CANAnalog object. 
         */
        m_pidController.setFeedbackDevice(m_encoder);

        if (ENABLE_VELOCITY_TEST) {
            // Default Velocity PID coefficients
            kP = 6e-5; 
            kI = 0;
            kD = 0; 
            kIz = 0; 
            kFF = 0.000015; 
            kMaxOutput = 1; 
            kMinOutput = -1;
            maxRPM = 5700;
        } else {
            // Default Position PID coefficients
            kP = 0.1; 
            kI = 1e-4;
            kD = 1; 
            kIz = 0; 
            kFF = 0; 
            kMaxOutput = 1; 
            kMinOutput = -1;
        }

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        // display PID coefficients on SmartDashboard
        SmartDashboard.putNumber("P Gain", kP);
        SmartDashboard.putNumber("I Gain", kI);
        SmartDashboard.putNumber("D Gain", kD);
        SmartDashboard.putNumber("I Zone", kIz);
        SmartDashboard.putNumber("Feed Forward", kFF);
        SmartDashboard.putNumber("Max Output", kMaxOutput);
        SmartDashboard.putNumber("Min Output", kMinOutput);
        SmartDashboard.putNumber("Encoder Velocity", m_encoder.getVelocity());
        SmartDashboard.putNumber("Encoder Count", m_encoder.getPosition());
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // read PID coefficients from SmartDashboard
        double p = SmartDashboard.getNumber("P Gain", 0);
        double i = SmartDashboard.getNumber("I Gain", 0);
        double d = SmartDashboard.getNumber("D Gain", 0);
        double iz = SmartDashboard.getNumber("I Zone", 0);
        double ff = SmartDashboard.getNumber("Feed Forward", 0);
        double max = SmartDashboard.getNumber("Max Output", 0);
        double min = SmartDashboard.getNumber("Min Output", 0);
        double usersetpoint = SmartDashboard.getNumber("SetPoint", 0);


        // if PID coefficients on SmartDashboard have changed, write new values to controller
        if((p != kP)) { m_pidController.setP(p); kP = p; }
        if((i != kI)) { m_pidController.setI(i); kI = i; }
        if((d != kD)) { m_pidController.setD(d); kD = d; }
        if((iz != kIz)) { m_pidController.setIZone(iz); kIz = iz; }
        if((ff != kFF)) { m_pidController.setFF(ff); kFF = ff; }
        if((max != kMaxOutput) || (min != kMinOutput)) { 
            m_pidController.setOutputRange(min, max); 
            kMinOutput = min; kMaxOutput = max; 
        }

        /**
         * PIDController objects are commanded to a set point using the 
         * SetReference() method.
         * 
         * The first parameter is the value of the set point, whose units vary
         * depending on the control type set in the second parameter.
         * 
         * The second parameter is the control type can be set to one of four 
         * parameters:
         *  com.revrobotics.CANSparkMax.ControlType.kDutyCycle
         *  com.revrobotics.CANSparkMax.ControlType.kPosition
         *  com.revrobotics.CANSparkMax.ControlType.kVelocity
         *  com.revrobotics.CANSparkMax.ControlType.kVoltage
         */
        if (ENABLE_POSITION_TEST) {
            m_pidController.setReference(usersetpoint, CANSparkMax.ControlType.kPosition);
        } else if (ENABLE_VELOCITY_TEST) {
            m_pidController.setReference(usersetpoint, CANSparkMax.ControlType.kVelocity);
        } else {
            m_pidController.setReference(usersetpoint, CANSparkMax.ControlType.kDutyCycle);
        }
        
        SmartDashboard.putNumber("ProcessVariable", m_encoder.getVelocity());
        SmartDashboard.putNumber("Encoder Velocity", m_encoder.getVelocity());
        SmartDashboard.putNumber("Encoder Position", m_encoder.getPosition());
        SmartDashboard.putNumber("Motor Output", spinMotor.getAppliedOutput());
        SmartDashboard.putNumber("Battery Voltage", spinMotor.getBusVoltage());
        SmartDashboard.putNumber("Motor Temperature", spinMotor.getMotorTemperature());
        }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setMotor(double setpoint) {
        spinMotor.set(setpoint);
        SmartDashboard.putNumber("SetPoint", setpoint);
    }

    public void stopMotor(){
        spinMotor.stopMotor();
        // spinMotor.disable();
    }
}

