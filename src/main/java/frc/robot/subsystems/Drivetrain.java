// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// import frc.robot.commands.*;
// import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_VictorSPX motorLeftFront;
private WPI_VictorSPX motorLeftRear;
private MotorControllerGroup motorGroupLeft;
private WPI_VictorSPX motorRightFront;
private WPI_VictorSPX motorRightRear;
private MotorControllerGroup motorGroupRight;
private DifferentialDrive diffDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorLeftFront = new WPI_VictorSPX(1);
 
 

motorLeftRear = new WPI_VictorSPX(4);
 
 

motorGroupLeft = new MotorControllerGroup(motorLeftFront, motorLeftRear  );
 addChild("MotorGroupLeft",motorGroupLeft);
 

motorRightFront = new WPI_VictorSPX(2);
 
 

motorRightRear = new WPI_VictorSPX(3);
 
 

motorGroupRight = new MotorControllerGroup(motorRightFront, motorRightRear  );
 addChild("MotorGroupRight",motorGroupRight);
 

diffDrive = new DifferentialDrive(motorGroupLeft, motorGroupRight);
 addChild("DiffDrive",diffDrive);
 diffDrive.setSafetyEnabled(true);
diffDrive.setExpiration(0.1);
diffDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void teleop(double throttle, double steering) {
        diffDrive.arcadeDrive(throttle, steering);
    }

    public void stop() {
        diffDrive.arcadeDrive(0.0, 0.0);
    }

}

